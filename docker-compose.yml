version: '3.8'


services:
#  service-registry:
#    image: gazizulin24/mts_city:service-registry
#    container_name: service-registry
#    ports:
#      - "8761:8761"
#    networks:
#      - mts_city

  consul:
    image: hashicorp/consul:latest
    container_name: consul
    environment:
      - CONSUL_LOCAL_CONFIG={"verify_incoming":false,"verify_outgoing":false,"server":true,"datacenter":"dc1"}
    ports:
      - "8500:8500" # Consul UI
      - "8600:8600/udp" # Consul DNS
    networks:
      - mts_city
  # DBs
  users-postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: usersadmin
      POSTGRES_PASSWORD: userssuper
      POSTGRES_DB: users_db
    container_name: "users-postgres"
    volumes:
      - ./users_dump.sql:/docker-entrypoint-initdb.d/dump.sql
    networks:
      - mts_city

  events-postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: eventsadmin
      POSTGRES_PASSWORD: eventssuper
      POSTGRES_DB: events_db
    volumes:
      - ./events_dump.sql:/docker-entrypoint-initdb.d/dump.sql
    networks:
      - mts_city

  sensors-postgis:
    image: "postgis/postgis:latest"
    environment:
      POSTGRES_USER: sensorsadmin
      POSTGRES_PASSWORD: sensorssuper
      POSTGRES_DB: sensors_db
    volumes:
      - ./sensors_dump.sql:/docker-entrypoint-initdb.d/dump.sql
    networks:
      - mts_city

#   CACHE
  redis-global:
    image: redis:7-alpine
    container_name: redis-global
    ports:
      - "6379:6379"
    networks:
      - mts_city
    volumes:
      - redis-data:/data

  # ZOOKEEPER CONFIG FOR KAFKA
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - mts_city

#   KAFKA
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - mts_city

  # KAFKA UI (exposed on 8090)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - mts_city

  # SERVICES

  auth-gateway:
    image: gazizulin24/mts_city:auth-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://users-postgres:5432/users_db
      SPRING_DATASOURCE_USERNAME: usersadmin
      SPRING_DATASOURCE_PASSWORD: userssuper
      SPRING_CLOUD_CONSUL_HOST: consul
      SPRING_CLOUD_CONSUL_PORT: 8500
    depends_on:
      - users-postgres
      - consul
    networks:
      - mts_city

  sensors-service:
    image: gazizulin24/mts_city:sensors-service
    restart: always
    ports:
      - "8081:8080" # REMOVE AFTER DISCOVERY FIXING
    depends_on:
      - sensors-postgis
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://sensors-postgis:5432/sensors_db
      SPRING_DATASOURCE_USERNAME: sensorsadmin
      SPRING_DATASOURCE_PASSWORD: sensorssuper
    networks:
      - mts_city

  events-service:
    image: gazizulin24/mts_city:events-service
    restart: always
    ports:
      - "8082:8080"
    depends_on:
      - sensors-postgis
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://events-postgres:5432/events_db
      SPRING_DATASOURCE_USERNAME: sensorsadmin
      SPRING_DATASOURCE_PASSWORD: sensorssuper
    networks:
      - mts_city

networks:
  mts_city:
    driver: bridge

volumes:
  redis-data:
  users-data:
  sensors-data:
  events-data: